"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/graphql-upload-nextjs";
exports.ids = ["vendor-chunks/graphql-upload-nextjs"];
exports.modules = {

/***/ "(rsc)/./node_modules/graphql-upload-nextjs/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/graphql-upload-nextjs/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GraphQLUpload: () => (/* binding */ GraphQLUpload),\n/* harmony export */   Upload: () => (/* binding */ Upload),\n/* harmony export */   bufferToStream: () => (/* binding */ bufferToStream),\n/* harmony export */   sanitizeAndValidateJSON: () => (/* binding */ sanitizeAndValidateJSON),\n/* harmony export */   streamToBuffer: () => (/* binding */ streamToBuffer),\n/* harmony export */   uploadProcess: () => (/* binding */ uploadProcess)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/type/definition.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/error/GraphQLError.mjs\");\n/* harmony import */ var next_server_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server.js */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var file_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! file-type */ \"(rsc)/./node_modules/file-type/core.js\");\n/* harmony import */ var istextorbinary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! istextorbinary */ \"(rsc)/./node_modules/istextorbinary/edition-es2017-esm/index.js\");\n\n\n\n\nclass Upload {\n    file;\n    promise;\n    reject = () => { };\n    resolve = () => { };\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (file) => {\n                this.file = file;\n                resolve(file);\n            };\n            this.reject = reject;\n        });\n        this.promise.catch(() => { });\n    }\n}\nconst GraphQLUpload = new graphql__WEBPACK_IMPORTED_MODULE_2__.GraphQLScalarType({\n    description: 'The Upload scalar type represents a file upload.',\n    name: 'Upload',\n    parseLiteral(node) { throw new graphql__WEBPACK_IMPORTED_MODULE_3__.GraphQLError('Upload literal unsupported.', { nodes: node }); },\n    parseValue(value) { return value instanceof Upload ? value.promise : new graphql__WEBPACK_IMPORTED_MODULE_3__.GraphQLError('Upload value invalid.'); },\n    serialize() { throw new graphql__WEBPACK_IMPORTED_MODULE_3__.GraphQLError('Upload serialization unsupported.'); }\n});\n/**\n * Extract files from form data.\n * @param formData - The form data containing file entries.\n * @returns An object mapping file keys to FormDataFile objects.\n */\nasync function extractFiles(formData) {\n    const files = {};\n    for (const [key, value] of formData.entries()) {\n        if (value instanceof File) {\n            files[key] = value;\n        }\n    }\n    return files;\n}\n/**\n * Stream to buffer utility function.\n * @param stream - The readable stream.\n * @returns A promise that resolves to a buffer.\n */\nasync function streamToBuffer(stream) {\n    const chunks = [];\n    for await (const chunk of stream) {\n        chunks.push(chunk);\n    }\n    return Buffer.concat(chunks);\n}\n/**\n * Buffer to stream utility function.\n * @param buffer - The buffer.\n * @returns A readable stream.\n */\nfunction bufferToStream(buffer) {\n    const { Readable } = require('stream');\n    const stream = new Readable();\n    stream.push(buffer);\n    stream.push(null);\n    return stream;\n}\n/**\n * Sanitize and validate JSON input.\n * @param input - The JSON string to sanitize and validate.\n * @returns The parsed JSON object.\n */\nfunction sanitizeAndValidateJSON(input) {\n    try {\n        const result = JSON.parse(input);\n        if (typeof result !== 'object' || result === null) {\n            throw new Error('Invalid JSON structure');\n        }\n        return result;\n    }\n    catch (error) {\n        console.error('Error parsing JSON:', error);\n        throw new Error('Invalid JSON input');\n    }\n}\n/**\n * Process an individual file upload.\n * @param file - The file to be uploaded.\n * @param variableName - The name of the variable associated with the file.\n * @param operations - The GraphQL operations containing the query and variables.\n * @param allowedTypes - The list of allowed MIME types.\n */\nasync function processUpload(file, variableName, operations, allowedTypes) {\n    // Validate file properties\n    if (!file.name || !file.size || !file.type) {\n        throw new Error('Invalid file properties');\n    }\n    const stream = await file.stream();\n    const buffer = await streamToBuffer(stream);\n    const fileType = await (0,file_type__WEBPACK_IMPORTED_MODULE_4__.fileTypeFromBuffer)(buffer);\n    // Determine the MIME type\n    let mimeType = file.type;\n    if (fileType) {\n        mimeType = fileType.mime;\n    }\n    else if ((0,istextorbinary__WEBPACK_IMPORTED_MODULE_1__.isText)(null, buffer)) {\n        mimeType = 'text/plain';\n    }\n    // Check if the file's MIME type is allowed\n    if (!allowedTypes.includes(mimeType)) {\n        throw new Error(`File type ${mimeType} is not allowed. Allowed types: ${allowedTypes.join(', ')}`);\n    }\n    const upload = new Upload();\n    upload.resolve({\n        fileSize: file.size,\n        fileName: file.name,\n        mimeType: mimeType,\n        encoding: 'binary',\n        createReadStream: () => bufferToStream(buffer)\n    });\n    operations.variables[variableName] = upload;\n}\n/**\n * Main function to handle file uploads in a GraphQL request.\n * @param request - The incoming request containing form data.\n * @param context - The context for the server operation.\n * @param server - The GraphQL server instance.\n * @param settings - The settings for file upload, including maxFileSize and allowedTypes.\n * @returns A response containing the result of the GraphQL operation.\n */\nasync function uploadProcess(request, context, server, settings) {\n    try {\n        // Extract form data from the request\n        const formData = await request.formData();\n        const files = await extractFiles(formData);\n        // Parse and validate the map and operations from the form data\n        const map = sanitizeAndValidateJSON(formData.get('map'));\n        const operations = sanitizeAndValidateJSON(formData.get('operations'));\n        const uploadPromises = [];\n        // Process each file upload based on the map\n        for (const fileKey of Object.keys(map)) {\n            const file = files[fileKey];\n            // Check if the file size exceeds the maximum allowed size\n            if (file.size > settings.maxFileSize) {\n                return next_server_js__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({ error: `File size is too large. Maximum allowed size is ${settings.maxFileSize / (1024 * 1024)}MB.` });\n            }\n            const pathSegment = map[fileKey][0];\n            const variableName = pathSegment.split('.').slice(-1)[0];\n            uploadPromises.push(processUpload(file, variableName, operations, settings.allowedTypes));\n        }\n        // Wait for all upload promises to resolve\n        await Promise.all(uploadPromises);\n        // Remove any variables that were not set\n        for (const key in operations.variables) {\n            if (!operations.variables[key]) {\n                delete operations.variables[key];\n            }\n        }\n        // Execute the GraphQL operation\n        const response = await server.executeOperation({ query: operations.query, variables: operations.variables }, { contextValue: await context });\n        // Return the appropriate response based on the result kind\n        if (response.body.kind === 'single') {\n            const { data, errors } = response.body.singleResult;\n            return next_server_js__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({ data, errors });\n        }\n        else if (response.body.kind === 'incremental') {\n            const { initialResult, subsequentResults } = response.body;\n            const results = [initialResult];\n            for await (const result of subsequentResults) {\n                results.push(result);\n            }\n            return next_server_js__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({ results });\n        }\n    }\n    catch (error) {\n        console.error('Error processing upload:', error);\n        const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n        return next_server_js__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({ error: `Error processing upload: ${errorMessage}` });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graphql-upload-nextjs/index.js\n");

/***/ })

};
;